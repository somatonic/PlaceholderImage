<?php
/**
 * Placeholder helper.
 *
 * Generates image placeholders with PHP and their GD library for creating websites
 * and mockups without using real images but with a perfect fit size
 *
 * @author     Patrick van Marsbergen
 * @copyright  (c) 2012 Mimbee All Rights Reserved
 * @license    http://mimbee.nl/bsd.html
 *
 * Source Class without changes taken from: https://github.com/marsbergen/PHP-Placeholder
 *
 * ProcessWire Module created by
 * @author  Philipp Urlich "Soma"
 *
 * Use this module in templates to generate placeholder images.
 * It doesn't create a physical image but a base64 data uri string to use as the src
 * of image tag. You can get the base64 code or the complete img tag for convenience.
 *
 * Example chained call:
 *
 * $base64 = $modules->PlaceholderImage->width(640)->height(480)->background('DDDDDD')->render();
 * Then insert the string as the src like: <img src="<?php echo $base64?>">
 *
 * Or pass true to render() to get a complete <img> tag
 * $imgTag = $modules->PlaceholderImage->width(640)->height(480)->render(true);
 *
 * Or static calls:
 *
 * $base64 = PlaceholderImage::image(150,100);
 * $base64 = PlaceholderImage::image(150, 100, 'FF0000', 'FFFFFF', 'Custom text');
 * $imgTag = PlaceholderImage::imagetag(150, 100, 'FF0000', 'FFFFFF', 'Custom text');
 *
 *
*/



class PlaceholderImage extends WireData implements Module {

    /**
     * The class defaults
     **/
    protected $_text             = NULL;
    protected $_width            = 150;
    protected $_height           = NULL;
    protected $_background_color = 'ff9f24'; // Orange
    protected $_text_color       = 'ffffff'; // White



    public static function getModuleInfo() {
        return array(
            'title' => "Placeholder Images",
            'summary' => 'Generate placeholder images. Generates base64 data uri string.',
            'version' => 1,
            'href' => '',
            'autoload' => false,
            'singular' => false
        );
    }


    /**
     * Define the width of the placeholder
     *
     * @param int $pixels The width in pixels
     * @return object Placeholder
     **/
    public function width ($pixels) {
        if(is_numeric($pixels) && $pixels > 0)
            $this->_width = $pixels;

        return $this;
    }

    /**
     * Define the height of the placeholder
     *
     * @param int $pixels The height in pixels
     * @return object Placeholder
     **/
    public function height ($pixels) {
        if(is_numeric($pixels) && $pixels > 0)
            $this->_height = $pixels;

        return $this;
    }

    /**
     * Define the text of the placeholder
     * If you define the message as NULL, you'll see the width and height of the placeholder.
     * A string or empty string will overwrite the width and heigth
     *
     * @param string $message The message you see in the placeholder.
     * @param string $color Define the color of the text in the placeholder in HEX
     * @return object Placeholder
     **/
    public function text ($message, $color = NULL) {
        if(!empty($message) && is_string($message))
            $this->_text = $message;

        if(!empty($color))
            $this->text_color($color);


        return $this;
    }

    /**
     * Define the color of the text in the placeholder in HEX
     *
     * @param string $color The color of the text in HEX
     * @return object Placeholder
     **/
    public function text_color ($color) {
        if(!empty($color) && preg_match('/[a-f0-9]{6}/i', $color) > 0)
            $this->_text_color = $color;

        return $this;
    }

    /**
     * Define the background color of the placeholder in HEX
     *
     * @param string $color The color of the placeholder background
     * @return object Placeholder
     **/
    public function background ($color) {
        if(!empty($color) && preg_match('/[a-f0-9]{6}/i', $color) > 0)
            $this->_background_color = $color;

        return $this;
    }

    /**
     * Render and return the image in Base64 image only or include an optimized image html-tag
     *
     * @param bool $img_tag TRUE to include the html image-tag
     * @return string The Base64 image or html image tag with the base64 image attached
     **/
    public function render ($img_tag = FALSE) {
        if(empty($this->_height))
            $this->_height = $this->_width;

        if($this->_text === NULL)
            $this->_text = $this->_width . ' x ' . $this->_height;

        $text_hex = str_split($this->_text_color, 2);
        $back_hex   = str_split($this->_background_color, 2);
        $image = imagecreatetruecolor($this->_width, $this->_height);
        $text_color = imagecolorallocate($image, hexdec($text_hex[0]), hexdec($text_hex[1]), hexdec($text_hex[2]));
        $bg_color   = imagecolorallocate($image, hexdec($back_hex[0]), hexdec($back_hex[1]), hexdec($back_hex[2]));
        imagefilledrectangle($image, 0, 0, $this->_width, $this->_height, $bg_color);

        $text_width = imagefontwidth(5) * strlen($this->_text);
        $xcenter = ceil($this->_width / 2);
        $x = $xcenter - (ceil($text_width/2));

        $ycenter = ceil($this->_height / 2);
        $y = $ycenter - 10;

        imagestring($image, 4, $x, $y, $this->_text, $text_color);

        ob_start();
        imagepng($image);
        $contents = ob_get_contents();
        ob_end_clean();

        imagedestroy($image);

        $html = 'data:image/png;base64,'.base64_encode($contents);

        if($img_tag === TRUE)
            $html = '<img src="'.$html.'" width="'.$this->_width.'" height="'.$this->_height.'" alt="'.$this->_text.'" title="'.$this->_text.'" />';
        return $html;
    }

    /**
     * Static function to render and return the image in Base64 image directly
     *
     * @param int $width The width in pixels
     * @param int $height The height in pixels
     * @param string $background_color The color of the placeholder background
     * @param string $text_color The color of the text in HEX
     * @param string $text The message you see in the placeholder.
     * @return string The Base64 image
     **/
    public static function image ($width = NULL, $height = NULL, $background_color = NULL, $text_color = NULL, $text = NULL) {
        $factory = new self();
        return $factory->width($width)
                ->height($height)
                ->background($background_color)
                ->text($text, $text_color)
                ->render();
    }

    /**
     * Static function to render and return the html image tag with the Base64 image attached directly
     *
     * @param int $width The width in pixels
     * @param int $height The height in pixels
     * @param string $background_color The color of the placeholder background
     * @param string $text_color The color of the text in HEX
     * @param string $text The message you see in the placeholder.
     * @return string The Base64 image in a html image tag
     **/
    public static function imagetag ($width = NULL, $height = NULL, $background_color = NULL, $text_color = NULL, $text = NULL) {
        $factory = new self();
        return $factory->width($width)
                ->height($height)
                ->background($background_color)
                ->text($text, $text_color)
                ->render(TRUE);
    }


    public function ___install(){
        if (extension_loaded('gd') && function_exists('gd_info')) {
            // all fine
        } else {
            throw new WireException("PHP GD library is NOT installed on your web server");
        }
    }

}
